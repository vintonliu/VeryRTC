//
// Created by dell on 0018,2018/7/18.
//

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "jni_helper.h"
#include "SignalingEventsJni.h"
#include "SipClient.h"

#ifdef __cplusplus
extern "C" {
#endif

using namespace mrtc;

static SipClient *ExtractNativeSipClient(JNIEnv *jni, jobject j_sip)
{
    jclass sipcls = GetObjectClass(jni, j_sip);
    jfieldID native_sip_id = GetFieldID(jni, sipcls, "nativeClient", "J");
    jlong j_s = GetLongField(jni, j_sip, native_sip_id);

    SipClient *sipClient = reinterpret_cast<SipClient*>(j_s);
    return sipClient;
}

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
{
    InitGlobalJniVariables(vm);

    return JNI_VERSION_1_6;
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    nativeCreateObserver
 * Signature: (Lclub/apprtc/veryrtc/SipNativeObserver;)J
 */
JNIEXPORT jlong JNICALL Java_club_apprtc_veryrtc_SipChannelClient_nativeCreateObserver
        (JNIEnv *jni, jobject thiz, jobject j_observer)
{
    LOGI("%s", __FUNCTION__);
    return (jlong)new SignalingEventsJni(jni, j_observer);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    freeNativeObserver
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_club_apprtc_veryrtc_SipChannelClient_freeNativeObserver
        (JNIEnv *jni, jobject, jlong j_observer)
{
    LOGI("%s", __FUNCTION__);
    SignalingEventsJni *se = reinterpret_cast<SignalingEventsJni*>(j_observer);
    delete se;
    se = nullptr;
}


/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doCreateClient
 * Signature: (Lclub/apprtc/veryrtc/SipNativeObserver;)Z
 */
JNIEXPORT jlong JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doCreateClient
        (JNIEnv *jni, jobject thiz, jlong j_observer)
{
    LOGI("%s", __FUNCTION__);
    SignalingEventsJni *se = reinterpret_cast<SignalingEventsJni*>(j_observer);
    return (jlong)new SipClient(se);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    freeNativeClient
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_club_apprtc_veryrtc_SipChannelClient_freeNativeClient
        (JNIEnv *, jobject, jlong j_sip)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = reinterpret_cast<SipClient*>(j_sip);
    delete sipClient;
    sipClient = nullptr;
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doRegister
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doRegister
        (JNIEnv *jni, jobject j_sip, jstring j_proxy,
         jstring j_display, jstring j_username, jstring j_userpwd)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);

    std::string proxy = JavaToStdString(jni, j_proxy);
    std::string display = JavaToStdString(jni, j_display);
    std::string username = JavaToStdString(jni, j_username);
    std::string userpwd = JavaToStdString(jni, j_userpwd);

    return (jboolean )sipClient->doRegister(proxy, display, username, username, userpwd);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doUnRegister
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doUnRegister
        (JNIEnv *jni, jobject j_sip)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);

    return (jboolean)sipClient->doUnRegister();
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doStartCall
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doStartCall
        (JNIEnv *jni, jobject j_sip, jstring j_to, jstring j_sdp)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);
    std::string to = JavaToStdString(jni, j_to);
    std::string sdp = JavaToStdString(jni, j_sdp);

    return (jboolean)sipClient->doStartCall(to, sdp);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doAnswer
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doAnswer
        (JNIEnv *jni, jobject j_sip, jstring j_sdp)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);
    std::string sdp = JavaToStdString(jni, j_sdp);
    return (jboolean)sipClient->doAcceptCall(sdp);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doHangup
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doHangup
        (JNIEnv *jni, jobject j_sip)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);

    return (jboolean)sipClient->doHangup();
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doSendCandidate
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doSendCandidate
        (JNIEnv *jni, jobject j_sip, jstring j_candidate)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);
    std::string candidate = JavaToStdString(jni, j_candidate);
    return (jboolean)sipClient->doSendCandidate(candidate);
}

/*
 * Class:     club_apprtc_veryrtc_SipChannelClient
 * Method:    doSetUserAgent
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doSetUserAgent
        (JNIEnv *jni, jobject j_sip, jstring j_uname, jstring j_uver)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);
    std::string uname = JavaToStdString(jni, j_uname);
    std::string uver = JavaToStdString(jni, j_uver);

    return (jboolean)sipClient->doSetUserAgent(uname, uver);
}

/*
 * Class:     com_montnets_mrtc_SipChannelClient
 * Method:    doSetUserAgent
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_club_apprtc_veryrtc_SipChannelClient_doSetSipTransport
        (JNIEnv *jni, jobject j_sip, jint j_transport, jint j_port)
{
    LOGI("%s", __FUNCTION__);
    SipClient *sipClient = ExtractNativeSipClient(jni, j_sip);

    return (jboolean)sipClient->doSetSipTransport((MSipTransport)j_transport, j_port);
}

#ifdef __cplusplus
}
#endif
